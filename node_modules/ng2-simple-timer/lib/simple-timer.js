"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var angular2_uuid_1 = require("angular2-uuid");
var SimpleTimer = (function () {
    function SimpleTimer() {
        this.timer = {};
        this.subscription = {};
    }
    SimpleTimer.prototype.getTimer = function () {
        return Object.keys(this.timer);
    };
    SimpleTimer.prototype.getSubscription = function () {
        return Object.keys(this.subscription);
    };
    SimpleTimer.prototype.newTimer = function (name, sec) {
        if (name === undefined || sec === undefined || this.timer[name]) {
            return false;
        }
        var o = Rx_1.Observable.timer(0, sec * 1000);
        this.timer[name] = { second: sec, observable: o };
        return true;
    };
    SimpleTimer.prototype.delTimer = function (name) {
        var _this = this;
        if (name === undefined || !this.timer[name]) {
            return false;
        }
        var s = this.getSubscription();
        s.forEach(function (i) {
            if (_this.subscription[i].name === name) {
                _this.unsubscribe(i);
            }
        });
        delete this.timer[name].observable;
        delete this.timer[name];
    };
    SimpleTimer.prototype.subscribe = function (name, callback) {
        if (!this.timer[name]) {
            return '';
        }
        var id = name + '-' + angular2_uuid_1.UUID.UUID();
        this.subscription[id] = {
            name: name,
            subscription: this.timer[name].observable.subscribe(callback)
        };
        return id;
    };
    SimpleTimer.prototype.unsubscribe = function (id) {
        if (!id || !this.subscription[id]) {
            return false;
        }
        this.subscription[id].subscription.unsubscribe();
        delete this.subscription[id];
    };
    return SimpleTimer;
}());
SimpleTimer = __decorate([
    core_1.Injectable()
], SimpleTimer);
exports.SimpleTimer = SimpleTimer;
//# sourceMappingURL=simple-timer.js.map